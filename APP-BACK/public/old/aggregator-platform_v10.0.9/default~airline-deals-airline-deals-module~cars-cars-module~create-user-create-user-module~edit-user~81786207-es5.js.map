{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ctx_r249","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocompleteDefaultOptions","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_autoActiveFirstOption","_keyManager","options","withWrap","_setVisibility","scrollTop","panel","nativeElement","length","_setVisibilityClasses","markForCheck","event","emit","classList","value","split","reduce","className","trim","ɵfac","MatAutocomplete_Factory","t","ɵcmp","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","_t","optionGroups","viewQuery","MatAutocomplete_Query","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","static","descendants","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","asObservable","pipe","_scrollStrategy","window","runOutsideAngular","addEventListener","element","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","unsubscribe","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","clickTarget","composedPath","target","formField","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","_setScrollTop","newScrollPosition","_getScrollTop","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","subscribe","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","change","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPosition","originX","originY","overlayX","overlayY","abovePosition","panelClass","positions","withPositions","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","readOnly","tabOut","_getOutsideClickStream","detachments","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","$event","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","autocompleteDisabled","toString","MatAutocompleteModule","ɵmod","ɵinj","MatAutocompleteModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~airline-deals-airline-deals-module~cars-cars-module~create-user-create-user-module~edit-user~81786207-es5.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _supportsShadowDom } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r249 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r249.id)(\"ngClass\", ctx_r249._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the autocomplete panel that emitted the event.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.source;\n    /**\n     * Option that was selected.\n     * @type {?}\n     */\n    MatAutocompleteSelectedEvent.prototype.option;\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Default `mat-autocomplete` options that can be overridden.\n * @record\n */\nfunction MatAutocompleteDefaultOptions() { }\nif (false) {\n    /**\n     * Whether the first option should be highlighted when an autocomplete panel is opened.\n     * @type {?|undefined}\n     */\n    MatAutocompleteDefaultOptions.prototype.autoActiveFirstOption;\n}\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_autoActiveFirstOption;\n    /** @type {?} */\n    MatAutocomplete.ngAcceptInputType_disableRipple;\n    /**\n     * Manages active item in option list based on key events.\n     * @type {?}\n     */\n    MatAutocomplete.prototype._keyManager;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.showPanel;\n    /** @type {?} */\n    MatAutocomplete.prototype._isOpen;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.template;\n    /**\n     * Element for the panel containing the autocomplete options.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panel;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.options;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionGroups;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._autoActiveFirstOption;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.panelWidth;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.optionSelected;\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.opened;\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.closed;\n    /** @type {?} */\n    MatAutocomplete.prototype._classList;\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     * @type {?}\n     */\n    MatAutocomplete.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocomplete.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-origin.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    MatAutocompleteOrigin.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n            if (_supportsShadowDom()) {\n                /** @type {?} */\n                const element = this._element.nativeElement;\n                /** @type {?} */\n                const rootNode = element.getRootNode ? element.getRootNode() : null;\n                // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n                // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n                this._isInsideShadowRoot = rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot;\n            }\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ ((this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target)));\n            /** @type {?} */\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            /** @type {?} */\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler($event) { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler($event) { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatAutocompleteTrigger.ngAcceptInputType_autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._componentDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._autocompleteDisabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._scrollStrategy;\n    /**\n     * Old value of the native input. Used to work around issues with the `input` event on IE.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._previousValue;\n    /**\n     * Strategy that is used to position the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._positionStrategy;\n    /**\n     * Whether or not the label state is being overridden.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._manuallyFloatingLabel;\n    /**\n     * The subscription for closing actions (some are bound to document).\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closingActionsSubscription;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportSubscription;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._canOpenOnNextFocus;\n    /**\n     * Whether the element is inside of a ShadowRoot component.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._isInsideShadowRoot;\n    /**\n     * Stream of keyboard events that can close the panel.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._closeKeyEventStream;\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._windowBlurHandler;\n    /**\n     * `View -> model callback called when value changes`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onChange;\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype._onTouched;\n    /**\n     * The autocomplete panel to be attached to this trigger.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.position;\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.autocompleteAttribute;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlayAttached;\n    /**\n     * Stream of autocomplete option selections.\n     * @type {?}\n     */\n    MatAutocompleteTrigger.prototype.optionSelections;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._zone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._formField;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatAutocompleteTrigger.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/autocomplete-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete,\n        MatOptionModule,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/autocomplete/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"]}