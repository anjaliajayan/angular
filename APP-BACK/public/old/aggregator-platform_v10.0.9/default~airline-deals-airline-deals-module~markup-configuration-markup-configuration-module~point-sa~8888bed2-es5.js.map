{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"names":["_c0","MatChipEvent","MatChipSelectionChange","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","type","selectors","hostAttrs","args","selector","host","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalRippleOptions","animationMode","_changeDetectorRef","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","basicChipAttrName","element","nativeElement","hasAttribute","tagName","toLowerCase","classList","add","emit","chip","_removeTriggerEvents","_dispatchSelectionChange","_markForCheck","focus","next","removable","event","disabled","preventDefault","stopPropagation","keyCode","remove","selectable","toggleSelected","onStable","asObservable","pipe","subscribe","run","markForCheck","disableRipple","value","coercedValue","_value","undefined","textContent","toString","MatChip_Factory","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","MatChipRemove","_t","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ariaSelected","inputs","color","outputs","exportAs","features","ctorParameters","decorators","String","propDecorators","_parentChip","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MatChipsDefaultOptions","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","_keyManager","chips","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","stateChanges","_selectionModel","multiple","updateErrorState","complete","_dropSubscriptions","inputElement","_chipInput","ids","_ariaDescribedby","join","_setSelectionByValue","fn","isDisabled","_originatesFromChip","options","focused","length","setFirstItemActive","_focusInput","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","nodeName","input","_clearSelection","forEach","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","map","_hasFocusedChip","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","empty","writeValue","id","placeholder","_placeholder","MatChipList_Factory","ɵcmp","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","role","required","errorState","compareWith","tabIndex","errorStateMatcher","provide","useExisting","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","styles","encapsulation","changeDetection","descendants","providers","None","OnPush","MatChipInputEvent","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","_emitChipEnd","addOnBlur","_isSeparatorKey","separators","has","registerInput","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","CHIP_DECLARATIONS","ɵ0","MatChipsModule","ɵmod","ɵinj","factory","MatChipsModule_Factory","useValue","ngJitMode","declarations","exports"],"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","file":"default~airline-deals-airline-deals-module~markup-configuration-markup-configuration-module~point-sa~8888bed2-es5.js","sourcesContent":["import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler($event) { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatChipRemove))]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [\"type\", \"button\", 1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                    // Prevent accidental form submissions.\n                    'type': 'button'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler($event) { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler($event) { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler($event) { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler($event) { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler($event) { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ( /** @type {?} */(ɵ0))\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ( /** @type {?} */(ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n\n//# sourceMappingURL=chips.js.map"]}